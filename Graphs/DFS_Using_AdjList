
#include<bits/stdc++.h>
using namespace std;
template <typename T>

class Graph{
    public:
    map<T, list<T>> adj;

    //addEdge
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
     
    void dfsH(T src, map<T, bool> &vis) {
        vis[src] = true;
        cout<<src<<" ";
        for(auto neigh: adj[src]) {
            if(!vis[neigh]) {
                dfsH(neigh,vis);
            }
        }
    }
    void dfs(T src) {
        map<T, bool> vis;
        dfsH(src, vis);
    }
};



int main() {

    int t;
    int V,E,u,v;
    cin>>t;

    while(t>0) {
        
        Graph<int> g;

        // cin>>V>>E;
        // for(int i=0; i< E;i++) {
        //     cin>>u>>v;
        //     g.addEdge(u,v);    
        // }
        
        // save time and run directly
        g.addEdge(0,1);
        g.addEdge(1,2);
        g.addEdge(0,4);
        g.addEdge(2,4);
        g.addEdge(2,3);
        g.addEdge(3,4);
        g.addEdge(3,5);
        
        cout<<"DFS using adjList is: ";
        g.dfs(0);
        t--;
    }

    return 0;
}


**********IO**********
1//that is, only one Testcase
DFS using adjList is: 0 1 2 4 3 5 

